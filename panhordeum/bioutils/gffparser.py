###########################################################
#                                                         #
#  Parser for GFF files generated by projection pipeline  #
#                                                         #
###########################################################

from __future__ import annotations
from typing import Union

import re
import csv
import gzip
from coords import Coords
from genedata import GeneLocus, mRNA, Cds

#------------------------------------------------------------
def parseTaggedGFF(fn : str, EXPLICIT_ALLOW_OVERLAP : bool = False) -> Union[dict, list]:
    """parses GFF file <fn> to object data
    :return dict[gene id] -> GeneLocus, list of GeneLoci"""

    if fn.endswith(".gz"):
        fhd = gzip.open(fn, mode='rt')
    else:
        fhd = open(fn)
    reader = csv.reader(fhd, delimiter='\t')
    genes = {}    # gene id -> gene model
    mid2gid = {}  # helper dict, holds pointer transcript id -> gene id; to reference upwards
    for row in reader:
        if len(row) != 9: continue
        if row[0].startswith('#'): continue  # we skip comment lines
        if row[2] == "gene" or row[2] == "pseudogene":
            ctg = row[0]
            src = row[1]
            tags = re.split(";", row[8])
            gid = ""
            desc = {}
            for tag in tags:
                if tag.startswith("ID="):
                    gid = re.sub("ID=","", tag)
                else:
                    try:
                        tg,val = re.split("=", tag)
                    except ValueError:
                        # here should be code for malformed gffs, not the case in
                        # our pipeline -> skip
                        continue
                    desc[tg] = val
            try:
                sc = float(row[5])
            except:
                sc = 0.0  # default score for pipeline
            locus = GeneLocus(gid=gid,ctg=ctg,src=src,score=sc,sofa=row[2])
            for tg, val in desc.items():
                locus.tags[tg] = val
            genes[gid] = locus

        elif row[2] == "mRNA" or row[2] == 'transcript':

            tags = re.split(";", row[8])
            pid = ""  # parent id
            tid = ""  # transcript ~ element id
            desc = {}
            for tag in tags:
                if tag.startswith("ID="):
                    tid = re.sub("ID=","", tag)
                elif tag.startswith("Parent="):
                    pid = re.sub("Parent=","", tag)
                else:
                    try:
                        tg,val = re.split("=", tag)
                    except ValueError:
                        # same as for gene line, see above
                        continue
                    desc[tg] = val
            #!!!!!!! inserted for erroneous gff (legacy code)!!!!!!!!!!!
            if not pid:
                pid = re.sub("\.m$","", tid)
            ctg = row[0]
            mstrand = 0 if row[6] == '+' else 1
            mrna = mRNA(mid=tid, ctg=ctg, strand=mstrand, coords=[], cds=Cds())
            for tg,val in desc.items():
                mrna.tags[tg] = val
            genes[pid].transcripts[tid] = mrna
            mid2gid[tid] = pid

        elif row[2] == "exon":

            ctg = row[0]
            tags = re.split(";",row[8])
            mid = ""
            for tag in tags:
                if tag.startswith("Parent="):
                    mid = re.sub("Parent=","",tag)

            gid = mid2gid[mid]
            a   = int(row[3])
            b   = int(row[4])
            exstrand = 0 if row[6] == '+' else 1
            beg = min(a,b) if exstrand == 0 else max(a,b)
            end = max(a,b) if exstrand == 0 else min(a,b)
            ct = Coords(ctg=ctg, beg=beg, end=end, strand=exstrand)
            genes[gid].transcripts[mid].append(ct, EXPLICIT_ALLOW_OVL=EXPLICIT_ALLOW_OVERLAP)

        elif row[2] == "CDS":

            ctg = row[0]
            tags = re.split(";",row[8])
            mid = ""
            for tag in tags:
                if tag.startswith("Parent="):
                    mid = re.sub("Parent=","",tag)

            a   = int(row[3])
            b   = int(row[4])
            exstrand = 0 if row[6] == '+' else 1
            beg = min(a,b) if exstrand == 0 else max(a,b)
            end = max(a,b) if exstrand == 0 else min(a,b)
            ct = Coords(ctg=ctg,beg=beg,end=end,strand=exstrand)
            gid = mid2gid[mid]
            genes[gid].transcripts[mid].coding.append(ct, EXPLICIT_ALLOW_OVL=EXPLICIT_ALLOW_OVERLAP)

    fhd.close()

    genome = []
    for gid, gene in genes.items():
        genome.append(gene)
    genome.sort()  # sort by genomic position

    return genes, genome


